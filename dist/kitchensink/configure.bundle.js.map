{"version":3,"sources":["webpack://extension-kitchensink/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://extension-kitchensink/./src/components/Configure/Configure.tsx","webpack://extension-kitchensink/./src/components/SandboxStatus/SandboxStatus.tsx"],"names":["module","exports","obj","key","value","Object","defineProperty","enumerable","configurable","writable","canPersistContextData","configurationData","updateConfigurationData","localConfigurationData","setLocalConfigurationData","useState","dashboardId","exploreId","lookId","extensionContext","useContext","ExtensionContext2","extensionSDK","useEffect","initialize","contextData","refreshContextData","error","console","validateValue","match","parseInt","validationMessages","type","message","getValidationMessages","Heading","mt","Form","width","onSubmit","event","preventDefault","FieldCheckbox","label","name","checked","showApiFunctions","onChange","showCoreSdkFunctions","showEmbedDashboard","showEmbedExplore","showEmbedLook","showExternalApiFunctions","showMiscFunctions","FieldText","currentTarget","FieldTextArea","thoughtForTheDay","imageData","src","disabled","SpaceVertical","onClick","SandboxStatus","sandboxStatus","setSandboxStatus","window","parent","looker","version","err","Paragraph","my"],"mappings":"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","file":"configure.bundle.js","sourcesContent":["function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useContext, useEffect, useState } from 'react'\nimport {\n  Button,\n  ButtonOutline,\n  Form,\n  FieldCheckbox,\n  FieldText,\n  Heading,\n  SpaceVertical,\n  ValidationMessages,\n  FieldTextArea,\n} from '@looker/components'\nimport { Looker40SDK } from '@looker/sdk'\nimport {\n  ExtensionContext2,\n  ExtensionContextData2,\n} from '@looker/extension-sdk-react'\nimport { SandboxStatus } from '../SandboxStatus'\nimport { ConfigurationData } from '../../types'\nimport { ConfigureProps } from './types'\n\nconst Configure: React.FC<ConfigureProps> = ({\n  canPersistContextData,\n  configurationData,\n  updateConfigurationData,\n}) => {\n  const [\n    localConfigurationData,\n    setLocalConfigurationData,\n  ] = useState<ConfigurationData>({\n    dashboardId: '',\n    exploreId: '',\n    lookId: '',\n  } as ConfigurationData)\n  const extensionContext = useContext<ExtensionContextData2<Looker40SDK>>(\n    ExtensionContext2\n  )\n  const { extensionSDK } = extensionContext\n\n  useEffect(() => {\n    const initialize = async () => {\n      if (canPersistContextData) {\n        try {\n          const contextData = await extensionSDK.refreshContextData()\n          if (contextData) {\n            setLocalConfigurationData(contextData as ConfigurationData)\n          }\n        } catch (error) {\n          console.error('failed to get latest context data', error)\n        }\n      }\n    }\n    setLocalConfigurationData({ ...configurationData })\n    initialize()\n  }, [])\n\n  const toggleApiFunctions = () => {\n    localConfigurationData.showApiFunctions = !localConfigurationData.showApiFunctions\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const toggleCoreSdkFunctions = () => {\n    localConfigurationData.showCoreSdkFunctions = !localConfigurationData.showCoreSdkFunctions\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const toggleEmbedDashboard = () => {\n    localConfigurationData.showEmbedDashboard = !localConfigurationData.showEmbedDashboard\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const toggleEmbedExplore = () => {\n    localConfigurationData.showEmbedExplore = !localConfigurationData.showEmbedExplore\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const toggleEmbedLook = () => {\n    localConfigurationData.showEmbedLook = !localConfigurationData.showEmbedLook\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const toggleExternalApiFunctions = () => {\n    localConfigurationData.showExternalApiFunctions = !localConfigurationData.showExternalApiFunctions\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const toggleMiscFunctions = () => {\n    localConfigurationData.showMiscFunctions = !localConfigurationData.showMiscFunctions\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const validateValue = (value: string): number | string => {\n    if (value.match(/\\d+/g)) {\n      return parseInt(value, 10)\n    } else {\n      return value\n    }\n  }\n\n  const changeDashboardId = (event: React.ChangeEvent<HTMLInputElement>) => {\n    localConfigurationData.dashboardId = validateValue(\n      event.currentTarget.value\n    )\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const changeExploreId = (event: React.ChangeEvent<HTMLInputElement>) => {\n    localConfigurationData.exploreId = event.currentTarget.value\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const changeLookId = (event: React.ChangeEvent<HTMLInputElement>) => {\n    localConfigurationData.lookId = validateValue(event.currentTarget.value)\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const changeThoughtForTheDay = (\n    event: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    localConfigurationData.thoughtForTheDay = event.currentTarget.value\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const changeImageData = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    localConfigurationData.imageData = event.currentTarget.value\n    setLocalConfigurationData({ ...localConfigurationData })\n  }\n\n  const getValidationMessages = (): ValidationMessages | undefined => {\n    let validationMessages: ValidationMessages | undefined\n    if (typeof localConfigurationData.dashboardId === 'string') {\n      if (!validationMessages) {\n        validationMessages = {}\n      }\n      validationMessages.dashboardId = {\n        type: 'error',\n        message: 'dashboard id is not numeric',\n      }\n    }\n    if (localConfigurationData.exploreId === '') {\n      if (!validationMessages) {\n        validationMessages = {}\n      }\n      validationMessages.exploreId = {\n        type: 'error',\n        message: 'explore id is empty',\n      }\n    }\n    if (typeof localConfigurationData.lookId === 'string') {\n      if (!validationMessages) {\n        validationMessages = {}\n      }\n      validationMessages.lookId = {\n        type: 'error',\n        message: 'look id is not numeric',\n      }\n    }\n    return validationMessages\n  }\n\n  const onConfigChangeSubmit = (event: React.FormEvent) => {\n    event.preventDefault()\n    updateConfigurationData({ ...localConfigurationData })\n  }\n\n  const onConfigResetClick = () => {\n    setLocalConfigurationData({ ...configurationData })\n  }\n\n  const validationMessages = getValidationMessages()\n\n  return (\n    <>\n      <Heading mt=\"xlarge\">Configuration</Heading>\n      <SandboxStatus />\n      <Form\n        width=\"50%\"\n        validationMessages={validationMessages}\n        onSubmit={onConfigChangeSubmit}\n      >\n        <FieldCheckbox\n          label=\"Show api functions\"\n          name=\"showApiFunctions\"\n          checked={localConfigurationData.showApiFunctions}\n          onChange={toggleApiFunctions}\n        />\n        <FieldCheckbox\n          label=\"Show core sdk functions\"\n          name=\"showCoreSdkFunctions\"\n          checked={localConfigurationData.showCoreSdkFunctions}\n          onChange={toggleCoreSdkFunctions}\n        />\n        <FieldCheckbox\n          label=\"Show embed dashboard\"\n          name=\"showEmbedDashboard\"\n          checked={localConfigurationData.showEmbedDashboard}\n          onChange={toggleEmbedDashboard}\n        />\n        <FieldCheckbox\n          label=\"Show embed explore\"\n          name=\"showEmbedExplore\"\n          checked={localConfigurationData.showEmbedExplore}\n          onChange={toggleEmbedExplore}\n        />\n        <FieldCheckbox\n          label=\"Show embed look\"\n          name=\"showEmbedLook\"\n          checked={localConfigurationData.showEmbedLook}\n          onChange={toggleEmbedLook}\n        />\n        <FieldCheckbox\n          label=\"Show external api functions\"\n          name=\"showExternalApiFunctions\"\n          checked={localConfigurationData.showExternalApiFunctions}\n          onChange={toggleExternalApiFunctions}\n        />\n        <FieldCheckbox\n          label=\"Show miscellaneous functions\"\n          name=\"showMiscFunctions\"\n          checked={localConfigurationData.showMiscFunctions}\n          onChange={toggleMiscFunctions}\n        />\n        <FieldText\n          label=\"Dashboard id\"\n          name=\"dashboardId\"\n          value={localConfigurationData.dashboardId}\n          onChange={changeDashboardId}\n        />\n        <FieldText\n          label=\"Explore id\"\n          name=\"exploreId\"\n          value={localConfigurationData.exploreId}\n          onChange={changeExploreId}\n        />\n        <FieldText\n          label=\"Look id\"\n          name=\"lookId\"\n          value={localConfigurationData.lookId}\n          onChange={changeLookId}\n        />\n        <FieldTextArea\n          label=\"Thought for the day\"\n          name=\"thoughtForTheDay\"\n          value={localConfigurationData.thoughtForTheDay || ''}\n          onChange={changeThoughtForTheDay}\n        />\n        <FieldTextArea\n          label=\"Image data\"\n          name=\"imageData\"\n          value={localConfigurationData.imageData || ''}\n          onChange={changeImageData}\n        />\n        {localConfigurationData.imageData && (\n          <img src={localConfigurationData.imageData} />\n        )}\n        <Button disabled={!!validationMessages}>Update configuration</Button>\n      </Form>\n      {canPersistContextData && (\n        <SpaceVertical width=\"50%\">\n          <ButtonOutline onClick={onConfigResetClick}>\n            Reset configuration\n          </ButtonOutline>\n        </SpaceVertical>\n      )}\n    </>\n  )\n}\n\nexport default Configure\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useEffect, useState } from 'react'\nimport { Paragraph } from '@looker/components'\nimport { SandboxStatusProps } from './types'\n\nexport const SandboxStatus: React.FC<SandboxStatusProps> = () => {\n  const [sandboxStatus, setSandboxStatus] = useState('')\n\n  useEffect(() => {\n    try {\n      const parentWindow: any = (window as any).parent\n      // Attempt to get data from the parent window. This\n      // will fail in a sandboxed environment and in most\n      // cases we want this to fail.\n      // eslint-disable-next-line no-unused-expressions\n      parentWindow.looker?.version\n      setSandboxStatus('NOT')\n    } catch (err) {\n      setSandboxStatus('')\n    }\n  }, [])\n\n  return (\n    <Paragraph my=\"medium\">\n      This extension is <b>{sandboxStatus}</b> sandboxed.\n    </Paragraph>\n  )\n}\n"],"sourceRoot":""}