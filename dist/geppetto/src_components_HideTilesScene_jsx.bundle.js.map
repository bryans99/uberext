{"version":3,"sources":["webpack://geppetto/./src/components/EmbedContainer.jsx","webpack://geppetto/./src/components/EmbedDashboard.jsx","webpack://geppetto/./src/components/HideTilesScene.jsx"],"names":["EmbedContainer","styled","EmbedDashboard","id","extensionSDK","useContext","ExtensionContext2","options","saveOptions","DashboardContext","dashboard","setDashboard","useState","useEffect","console","log","setOptions","setupDashboard","dashboardLoaded","event","embedCtrRef","useCallback","el","hostUrl","lookerHostData","LookerEmbedSDK","withNext","appendTo","on","build","connect","then","catch","error","ref","propTypes","PropTypes","restoreOptions","updateActiveTiles","updateDashboardId","tiles","selectOptions","map","tile","label","title","value","String","selectedValues","filter","hidden","icon","onClick","SelectMulti","values","onChange"],"mappings":"wNA0BaA,E,SAAiBC,kBAAH,qDAAGA,CAAH,+ECKdC,EAAiB,IAAY,IAAX,GAAEC,GAAS,GAClC,aAAEC,IAAiBC,gBAAWC,MAC9B,QAAEC,EAAF,YAAWC,IAAgBH,gBAAWI,MACrCC,EAAWC,IAAgBC,iBAElCC,gBAAU,KACJN,GAAWG,IACbI,QAAQC,IAAI,aAAc,CAAER,YAC5BG,EAAUM,WAAWT,MAEtB,CAACA,IAEJ,IAAMU,EAAkBP,IACtBC,EAAaD,IAGTQ,EAAmBC,IACvB,IAAM,UAAET,GAAcS,GAChB,QAAEZ,GAAYG,EACpBF,EAAYD,IAGRa,GAAcC,kBACjBC,IACC,GAAIA,GAAMnB,EAAI,OACNoB,EAAO,UAAGnB,EAAaoB,sBAAhB,aAAG,EAA6BD,QACzCA,IACFE,sBAAoBF,GACpBE,uCAAqCtB,GAClCuB,WACAC,SAASL,GACTM,GAAG,mBAAoBV,GACvBW,QACAC,UACAC,KAAKd,GACLe,OAAOC,IACNnB,QAAQmB,MAAM,mBAAoBA,UAK5C,CAAC9B,IAGH,OAAO,gBAACH,EAAD,CAAgBkC,IAAKd,KAG9BlB,EAAeiC,UAAY,CACzBhC,GAAIiC,wB,uJCVN,QAhCuB,KACrB,IAAM,eAAEC,EAAF,kBAAkBC,EAAlB,kBAAqCC,EAArC,MAAwDC,IAC5DnC,gBAAWI,MAEbI,gBAAU,KACR0B,EAPgB,QAQf,IAEH,IAAME,EAAgBD,EAAME,KAAKC,IAAD,CAC9BC,MAAOD,EAAKE,MACZC,MAAOC,OAAOJ,EAAKxC,QAEf6C,EAAiBR,EACpBS,QAAQN,IAAUA,EAAKO,SACvBR,KAAKC,GAASI,OAAOJ,EAAKxC,MAG7B,OAFAW,QAAQC,IAAI,CAAE0B,gBAAeO,iBAAgBR,UAG3C,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAYW,KAAM,gBAAC,IAAD,MAAaC,QAASf,IACxC,gBAAC,EAAAgB,YAAD,CACE9C,QAASkC,EACTa,OAAQN,EACRO,SAAUjB,KAGd,gBAAC,IAAD,CAAgBnC,GA7BF","file":"src_components_HideTilesScene_jsx.bundle.js","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport styled from 'styled-components'\n\nexport const EmbedContainer = styled.div`\n  width: 100%;\n  height: calc(100vh - 100px);\n  & > iframe {\n    width: 100%;\n    height: 100%;\n  }\n`\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useCallback, useContext, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { ExtensionContext2 } from '@looker/extension-sdk-react'\nimport { LookerEmbedSDK } from '@looker/embed-sdk'\nimport { DashboardContext } from '../providers/EmbeddedDashboardProvider'\nimport { EmbedContainer } from './EmbedContainer'\n\nexport const EmbedDashboard = ({ id }) => {\n  const { extensionSDK } = useContext(ExtensionContext2)\n  const { options, saveOptions } = useContext(DashboardContext)\n  const [dashboard, setDashboard] = useState()\n\n  useEffect(() => {\n    if (options && dashboard) {\n      console.log('setOptions', { options })\n      dashboard.setOptions(options)\n    }\n  }, [options])\n\n  const setupDashboard = (dashboard) => {\n    setDashboard(dashboard)\n  }\n\n  const dashboardLoaded = (event) => {\n    const { dashboard } = event\n    const { options } = dashboard\n    saveOptions(options)\n  }\n\n  const embedCtrRef = useCallback(\n    (el) => {\n      if (el && id) {\n        const hostUrl = extensionSDK.lookerHostData?.hostUrl\n        if (hostUrl) {\n          LookerEmbedSDK.init(hostUrl)\n          LookerEmbedSDK.createDashboardWithId(id)\n            .withNext()\n            .appendTo(el)\n            .on('dashboard:loaded', dashboardLoaded)\n            .build()\n            .connect()\n            .then(setupDashboard)\n            .catch((error) => {\n              console.error('Connection error', error)\n            })\n        }\n      }\n    },\n    [id]\n  )\n\n  return <EmbedContainer ref={embedCtrRef} />\n}\n\nEmbedDashboard.propTypes = {\n  id: PropTypes.string.isRequired,\n}\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useContext, useEffect } from 'react'\nimport {\n  IconButton,\n  SelectMulti,\n  Space,\n  SpaceVertical,\n} from '@looker/components'\nimport { Refresh } from '@styled-icons/material'\nimport { DashboardContext } from '../providers/EmbeddedDashboardProvider'\nimport { EmbedDashboard } from './EmbedDashboard'\n\nconst dashboardId = '19'\n\nconst HideTilesScene = () => {\n  const { restoreOptions, updateActiveTiles, updateDashboardId, tiles } =\n    useContext(DashboardContext)\n\n  useEffect(() => {\n    updateDashboardId(dashboardId)\n  }, [])\n\n  const selectOptions = tiles.map((tile) => ({\n    label: tile.title,\n    value: String(tile.id),\n  }))\n  const selectedValues = tiles\n    .filter((tile) => !tile.hidden)\n    .map((tile) => String(tile.id))\n  console.log({ selectOptions, selectedValues, tiles })\n\n  return (\n    <SpaceVertical>\n      <Space>\n        <IconButton icon={<Refresh />} onClick={restoreOptions} />\n        <SelectMulti\n          options={selectOptions}\n          values={selectedValues}\n          onChange={updateActiveTiles}\n        />\n      </Space>\n      <EmbedDashboard id={dashboardId} />\n    </SpaceVertical>\n  )\n}\n\nexport default HideTilesScene\n"],"sourceRoot":""}