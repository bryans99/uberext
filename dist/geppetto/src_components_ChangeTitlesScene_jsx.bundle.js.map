{"version":3,"sources":["webpack://geppetto/./src/components/ChangeTitlesScene.jsx","webpack://geppetto/./src/components/EmbedContainer.jsx","webpack://geppetto/./src/components/EmbedDashboard.jsx"],"names":["restoreOptions","updateDashboardId","tiles","updateTile","useContext","DashboardContext","useEffect","handleChange","id","event","title","target","value","inputs","map","InputText","key","onChange","bind","icon","onClick","EmbedContainer","styled","EmbedDashboard","extensionSDK","ExtensionContext2","options","saveOptions","dashboard","setDashboard","useState","console","log","setOptions","setupDashboard","dashboardLoaded","embedCtrRef","useCallback","el","hostUrl","lookerHostData","LookerEmbedSDK","withNext","appendTo","on","build","connect","then","catch","error","ref","propTypes","PropTypes"],"mappings":"iQA2DA,QA3B0B,KACxB,IAAM,eAAEA,EAAF,kBAAkBC,EAAlB,MAAqCC,EAArC,WAA4CC,IAChDC,gBAAWC,MAEbC,gBAAU,KACRL,EAPgB,QAQf,IAEH,IAAMM,EAAe,CAACC,EAAIC,KACxBN,EAAWK,EAAI,CAAEE,MAAOD,EAAME,OAAOC,SAGjCC,EAASX,EAAMY,KAAI,QAAC,GAAEN,EAAF,MAAME,GAAP,SACvB,gBAAC,EAAAK,UAAD,CAAWC,IAAKR,EAAII,MAAOF,EAAOO,SAAUV,EAAaW,KAAK,KAAMV,QAGtE,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAYW,KAAM,gBAAC,IAAD,MAAaC,QAASpB,IACvCa,GAEH,gBAAC,IAAD,CAAgBL,GAxBF,U,iHCJPa,E,SAAiBC,kBAAH,qDAAGA,CAAH,+ECKdC,EAAiB,IAAY,IAAX,GAAEf,GAAS,GAClC,aAAEgB,IAAiBpB,gBAAWqB,MAC9B,QAAEC,EAAF,YAAWC,IAAgBvB,gBAAWC,MACrCuB,EAAWC,IAAgBC,iBAElCxB,gBAAU,KACJoB,GAAWE,IACbG,QAAQC,IAAI,aAAc,CAAEN,YAC5BE,EAAUK,WAAWP,MAEtB,CAACA,IAEJ,IAAMQ,EAAkBN,IACtBC,EAAaD,IAGTO,EAAmB1B,IACvB,IAAM,UAAEmB,GAAcnB,GAChB,QAAEiB,GAAYE,EACpBD,EAAYD,IAGRU,GAAcC,kBACjBC,IACC,GAAIA,GAAM9B,EAAI,OACN+B,EAAO,UAAGf,EAAagB,sBAAhB,aAAG,EAA6BD,QACzCA,IACFE,sBAAoBF,GACpBE,uCAAqCjC,GAClCkC,WACAC,SAASL,GACTM,GAAG,mBAAoBT,GACvBU,QACAC,UACAC,KAAKb,GACLc,OAAOC,IACNlB,QAAQkB,MAAM,mBAAoBA,UAK5C,CAACzC,IAGH,OAAO,gBAACa,EAAD,CAAgB6B,IAAKd,KAG9Bb,EAAe4B,UAAY,CACzB3C,GAAI4C","file":"src_components_ChangeTitlesScene_jsx.bundle.js","sourcesContent":["/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useContext, useEffect } from 'react'\nimport { IconButton, InputText, Space, SpaceVertical } from '@looker/components'\nimport { Refresh } from '@styled-icons/material'\nimport { DashboardContext } from '../providers/EmbeddedDashboardProvider'\nimport { EmbedDashboard } from './EmbedDashboard'\n\nconst dashboardId = '19'\n\nconst ChangeTitlesScene = () => {\n  const { restoreOptions, updateDashboardId, tiles, updateTile } =\n    useContext(DashboardContext)\n\n  useEffect(() => {\n    updateDashboardId(dashboardId)\n  }, [])\n\n  const handleChange = (id, event) => {\n    updateTile(id, { title: event.target.value })\n  }\n\n  const inputs = tiles.map(({ id, title }) => (\n    <InputText key={id} value={title} onChange={handleChange.bind(null, id)} />\n  ))\n\n  return (\n    <SpaceVertical>\n      <Space>\n        <IconButton icon={<Refresh />} onClick={restoreOptions} />\n        {inputs}\n      </Space>\n      <EmbedDashboard id={dashboardId} />\n    </SpaceVertical>\n  )\n}\n\nexport default ChangeTitlesScene\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport styled from 'styled-components'\n\nexport const EmbedContainer = styled.div`\n  width: 100%;\n  height: calc(100vh - 100px);\n  & > iframe {\n    width: 100%;\n    height: 100%;\n  }\n`\n","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2021 Looker Data Sciences, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport React, { useCallback, useContext, useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { ExtensionContext2 } from '@looker/extension-sdk-react'\nimport { LookerEmbedSDK } from '@looker/embed-sdk'\nimport { DashboardContext } from '../providers/EmbeddedDashboardProvider'\nimport { EmbedContainer } from './EmbedContainer'\n\nexport const EmbedDashboard = ({ id }) => {\n  const { extensionSDK } = useContext(ExtensionContext2)\n  const { options, saveOptions } = useContext(DashboardContext)\n  const [dashboard, setDashboard] = useState()\n\n  useEffect(() => {\n    if (options && dashboard) {\n      console.log('setOptions', { options })\n      dashboard.setOptions(options)\n    }\n  }, [options])\n\n  const setupDashboard = (dashboard) => {\n    setDashboard(dashboard)\n  }\n\n  const dashboardLoaded = (event) => {\n    const { dashboard } = event\n    const { options } = dashboard\n    saveOptions(options)\n  }\n\n  const embedCtrRef = useCallback(\n    (el) => {\n      if (el && id) {\n        const hostUrl = extensionSDK.lookerHostData?.hostUrl\n        if (hostUrl) {\n          LookerEmbedSDK.init(hostUrl)\n          LookerEmbedSDK.createDashboardWithId(id)\n            .withNext()\n            .appendTo(el)\n            .on('dashboard:loaded', dashboardLoaded)\n            .build()\n            .connect()\n            .then(setupDashboard)\n            .catch((error) => {\n              console.error('Connection error', error)\n            })\n        }\n      }\n    },\n    [id]\n  )\n\n  return <EmbedContainer ref={embedCtrRef} />\n}\n\nEmbedDashboard.propTypes = {\n  id: PropTypes.string.isRequired,\n}\n"],"sourceRoot":""}